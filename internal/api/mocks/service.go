// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	api "bookstore/internal/api"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateAccount provides a mock function with given fields: ctx, email, password
func (_m *Service) CreateAccount(ctx context.Context, email string, password string) error {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBooks provides a mock function with given fields: ctx
func (_m *Service) GetAllBooks(ctx context.Context) ([]api.Book, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBooks")
	}

	var r0 []api.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]api.Book, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []api.Book); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookByID provides a mock function with given fields: ctx, bookID
func (_m *Service) GetBookByID(ctx context.Context, bookID string) (api.Book, error) {
	ret := _m.Called(ctx, bookID)

	if len(ret) == 0 {
		panic("no return value specified for GetBookByID")
	}

	var r0 api.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (api.Book, error)); ok {
		return rf(ctx, bookID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) api.Book); ok {
		r0 = rf(ctx, bookID)
	} else {
		r0 = ret.Get(0).(api.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderHistory provides a mock function with given fields: ctx, email
func (_m *Service) GetOrderHistory(ctx context.Context, email string) ([]api.Order, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderHistory")
	}

	var r0 []api.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]api.Order, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []api.Order); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserIDByEmail provides a mock function with given fields: ctx, email
func (_m *Service) GetUserIDByEmail(ctx context.Context, email string) (string, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserIDByEmail")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceOrder provides a mock function with given fields: ctx, email, books
func (_m *Service) PlaceOrder(ctx context.Context, email string, books []api.BookOrder) error {
	ret := _m.Called(ctx, email, books)

	if len(ret) == 0 {
		panic("no return value specified for PlaceOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []api.BookOrder) error); ok {
		r0 = rf(ctx, email, books)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
